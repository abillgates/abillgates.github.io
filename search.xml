<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[腾讯2020校园笔试题 逛街]]></title>
    <url>%2F2020%2F02%2F22%2F%E8%85%BE%E8%AE%AF2020%E6%A0%A1%E5%9B%AD%E7%AC%94%E8%AF%95%E9%A2%98-%E9%80%9B%E8%A1%97%2F</url>
    <content type="text"><![CDATA[题目描述小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有n座高楼排成一行。 小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住） 时间限制：C/C++ 2秒，其他语言4秒 空间限制：C/C++ 256M，其他语言512M 输入描述: 1234&gt; 输入第一行将包含一个数字n，代表楼的栋数，接下来的一行将包含n个数字wi(1&lt;=i&lt;=n)，代表每一栋楼的高度。&gt; 1&lt;=n&lt;=100000;&gt; 1&lt;=wi&lt;=100000; &gt; 输出描述: 12&gt; 输出一行，包含空格分割的n个数字vi，分别代表小Q在第i栋楼时能看到的楼的数量。&gt; 输入例子1: 123&gt; 6&gt; 5 3 8 3 2 5&gt; 输出例子1: 12&gt; 3 3 5 4 4 4&gt; 例子说明1: 12&gt; 当小Q处于位置3时，他可以向前看到位置2,1处的楼，向后看到位置4,6处的楼，加上第3栋楼，共可看到5栋楼。当小Q处于位置4时，他可以向前看到位置3处的楼，向后看到位置5,6处的楼，加上第4栋楼，共可看到4栋楼。&gt; 思路 使用单调栈 分别从从头和尾两次遍历，当前栈的大小即为某一方向可以看到的数目 代码实现123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;stack&gt;using namespace std;vector&lt;int&gt; canSee(vector&lt;int&gt; nums)&#123; stack&lt;int&gt; st,st1; int n = nums.size(); vector&lt;int&gt; ans(n,0); for(int i=n-1;i&gt;=0;i--) &#123; ans[i] = st.size(); while (!st.empty() &amp;&amp; nums[i] &gt;= nums[st.top()])st.pop(); st.push(i); ans[i] += 1; &#125; for(int i=0;i&lt;n;i++) &#123; ans[i] += st1.size(); while (!st1.empty() &amp;&amp; nums[i] &gt;= nums[st1.top()])st1.pop(); st1.push(i); &#125; return ans;&#125;int main()&#123; int n; cin &gt;&gt; n; vector&lt;int&gt; nums(n); for (int i = 0; i &lt; n; i++)cin &gt;&gt; nums[i]; auto res = canSee(nums); for (int i : res)cout &lt;&lt; i &lt;&lt; " ";&#125; 复杂度分析 时间复杂度O(n) 空间复杂度O(n)]]></content>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[练车过程]]></title>
    <url>%2F2019%2F09%2F22%2F%E7%BB%83%E8%BD%A6%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[科目一这个就是看看题，做个题库，记忆一些数字，图案和条文，很多生活中都非常熟悉。其中有一些关于车辆的驾驶需要掌握的状态，需要学习一下。 科目二这个记录一下，感觉操作的手忙脚乱的，关键是找准感觉，否则一顿胡乱操作很容易出问题。关键在与正确控制离合器，做到车速又慢又稳。过程中尽量不要使用刹车，否则车辆状态容易失控，进而错过各种打轮时机。 倒车入库这个分为左倒库和右倒库，操作正好对称过来。 考试的时候和平时的练习略有不同，因为需要场外进入倒库项目区。具体的做法如下。 在库区黄线与自己驾驶位置平齐后，停车，等待进入考试区域。进入的时候，方向盘向右打一圈，待左侧镜子离左侧库区边缘线大概20 cm的时候，车轮向左打两圈，待车身回正后，向右回一圈使车轮回正。车轮回正后，继续向前行驶，待到库区黄线与自己平齐后，停车，准备倒车。 向后倒车，待到黄线碰到左镜下沿时，方向盘向右打满 ，向后倒。瞧右后视镜，当从镜子中看到左后轮到达地库口第三条虚线的时候，方向盘向左回一圈，继续后倒，当从后视镜看不到左侧库角后，向右打满。看左侧反光镜，看到车身与库线平齐后，将车轮回正。继续倒车，等到反光镜下沿挡住库区横线，停车，准备向前走。 挂一档，向前走，等到前边车身挡住库区前边横线，向左打满方向盘。车身正后，回正车轮，继续向前走，等到库区黄线与自己平齐，挂倒挡，准备倒车。 向后倒车，待到黄线碰到左镜下沿，方向盘向左打满。… … … … 最后，当库区下面的线与自己重合时，向左打一圈出倒库区。 侧方停车]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1185. 一周中的第几天]]></title>
    <url>%2F2019%2F09%2F14%2F%E4%B8%80%E5%91%A8%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[实现方法题目描述原文地址：leetcode 1185. 一周中的第几天 方法既然这道题要求我们给出指定时间范围内的某一天的具体是星期几，我们想到的解决办法无外乎是找到一个基准，然后统计需要计算的日期与这个基准之间的天数。通过计算出来的天数加上这个基准的星期几对7取余即可得到所求的日期是一周中的哪一天。 具体的实现则是，定义一个返回数组，通过求到数返回这个数组索引所指向的表示星期几的字符串。题目中说日期是从1970年开始，那么不妨选择1969年12月31日作为我们的基准线，这样十分方便中间间隔天数的统计计算。这一天是星期三，初始化total变量为3，还需要一个判断平年闰年的函数，以确定我们需要加上366天还是365天，当统计到题目中给出的年份时，注意如果所给月份大于2还要判断该年是平年还是闰年，以确定2月份是加上28天还是29天。 具体C++实现代码如下。 C++代码1234567891011121314151617181920212223class Solution &#123;public: string dayOfTheWeek(int day, int month, int year) &#123; const char* weekday[7] = &#123; "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" &#125;; int monthday[13] = &#123; 0,31,28,31,30,31,30,31,31,30,31,30,31 &#125;; int tol_day = 3; for (int i = 1970; i &lt; year; i++) &#123; tol_day = tol_day + (isLeap(i) ? 366 : 365); &#125; for (int i = 1; i &lt; month; i++) &#123; if (i == 2 &amp;&amp; isLeap(year)) tol_day = tol_day + 29; else tol_day = tol_day + monthday[i]; &#125; return weekday[(tol_day + day) % 7]; &#125;private: bool isLeap(int year) &#123; return year % 400 == 0 || (year % 100 != 0 &amp;&amp; year % 4 == 0); &#125;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 560. 和为K的子数组]]></title>
    <url>%2F2019%2F09%2F13%2F%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[算法原理题目描述leetcode 560 和为k的子数组 前缀和&amp;哈希表对于这种题目，很容易一眼就看到暴力穷举的办法，但是可以依据通过避免暴力搜索中的重复计算来优化算法。可以使用对数组累加求和的方法来减少重复的累加。但是在此基础上，使用hash表可以在一次搜索的情况下完成统计。 因此，使用一个map来统计所有的索引的累加和以及相同的累加和出现的次数，通过遍历数组不断的找到新的累加和，并且在hash表中创建对应的条目，如果该和已经存在，那么我们增加该和的计数。在统计新出现的累加和的同时，确定sum-k和出现的次数，因为新的累加和减去sum-k就是和为k的子数组，将该和出现的次数加入到总的符合题目要求的子数组的数目中去。 另外这里有一点需要注意的是，因为可能数组的累加和本身就等于k，因此我们需要初始化map设置和为0的元素的数目为1。 具体的实现代码如下所示。 C++代码12345678910111213141516171819class Solution &#123;public: int subarraySum(vector&lt;int&gt;&amp; nums, int k) &#123; int n = nums.size(); unordered_map&lt;int, int&gt; m; int res = 0; // 需要考虑数组前缀和本身值为k的情况 m[0] = 1; int sum = 0; for (int i = 0; i &lt; n; i++) &#123; sum = sum + nums[i]; if (m.find(sum - k) != m.end()) &#123; res++; &#125; m[sum]++; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 526. 优美的排列]]></title>
    <url>%2F2019%2F09%2F11%2FLeetCode-526-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[算法原理原题地址leetcode 526 优美的排列 回溯法经典的全排列问题，使用回溯法。关键是依据题意进行剪枝操作，统计符合题目要求的排列的数量。题目中是对从1到N的N个数字生成排列，那么我们使用一个for循环进行元素的筛选；同时，元素不能重复使用，因此使用一个bool类型的visited数组来标记元素是否被访问；另外，我们使用一个pos变量来记录生成的排列中元素的数量，当pos大于题目中的N时，说明已经完成一组N个元素的一个排列，此时符合条件的元素的数目加一。 具体实现C++代码如下所示。 C++代码123456789101112131415161718192021222324class Solution &#123;public: int countArrangement(int N) &#123; int res=0; vector&lt;bool&gt; visited(N+1,false); dfs(N,1,res,visited); return res; &#125;private: void dfs(int N,int pos,int&amp; res,vector&lt;bool&gt; visited)&#123; if(pos&gt;N)&#123; res++; return; &#125; for(int i=1;i&lt;=N;i++)&#123; if(!visited[i]&amp;&amp;(i%pos==0||pos%i==0))&#123; visited[i]=true; dfs(N,pos+1,res,visited); visited[i]=false; &#125; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My First Blog]]></title>
    <url>%2F2019%2F04%2F25%2FMy-First-Blog%2F</url>
    <content type="text"><![CDATA[This is my first blog that i have edit,i’m very glad to edit it though i unfamiliar with the markdown grammar,yes,i can just write without format. say whati love huimin!]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start From HereCreate a new post method1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
